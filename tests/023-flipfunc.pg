SET search_path = public,tap;

BEGIN;
--SELECT plan( 5 );
SELECT * FROM no_plan();

-- Test get_random_string().
SELECT has_function('get_random_string');
SELECT has_function('get_random_string', ARRAY['integer']);
SELECT function_returns('get_random_string', 'text');
SELECT function_lang_is('get_random_string', 'plpgsql');
SELECT volatility_is('get_random_string', 'volatile');
SELECT is_strict('get_random_string');

SELECT is(
    length(get_random_string(i)), i,
    'get_random_string(' || i || ') should work'
) FROM generate_series(1, 33) AS i;

-- Test ins_flip().
SELECT has_function('ins_flip');
SELECT has_function('ins_flip', ARRAY['text', 'text']);
SELECT function_returns('ins_flip', 'text');
SELECT function_lang_is('ins_flip', 'plpgsql');
SELECT volatility_is('ins_flip', 'volatile');
SELECT is_definer('ins_flip');

CREATE SCHEMA mock;

CREATE OR REPLACE FUNCTION mock.get_random_string(
    INTEGER
) RETURNS TEXT LANGUAGE SQL AS $$
    SELECT 'a'::text;
$$;

SELECT ins_user('jrivers', '****');

SELECT is( COUNT(*)::int, 0, 'Should be no flips')
  FROM flips;

SET search_path = mock,public,tap;
SELECT is(
    ins_flip(
        'jrivers',
        'If I found you floating in my pool, Iâ€™d punish my dog.'
     ),
     'a',
    'Inserting a flip should return ID'
);

SELECT is( COUNT(*)::int, 1, 'Should now be 1 flips')
  FROM flips;

SELECT * FROM finish();
ROLLBACK;
