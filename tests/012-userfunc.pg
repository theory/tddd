SET search_path = public,tap;

BEGIN;
--SELECT plan( 5 );
SELECT * FROM no_plan();

SELECT has_function('ins_user');
SELECT has_function('ins_user', ARRAY['text', 'text']);
SELECT function_returns('ins_user', 'void');

SELECT is(COUNT(*)::int, 0, 'Should have no users')
  FROM users;
SELECT lives_ok(
    $$ SELECT ins_user('theory', 'wet blanket') $$,
    'Execution of ins_user() should not die'
);
SELECT is(COUNT(*)::int, 1, 'Should now have one user')
  FROM users;

SELECT isnt(
    password, 'wet blanket',
    'Password should not be clear text'
) FROM users WHERE nickname = 'theory';

SELECT isnt(
    password, 'theory',
    'Password should not be nickname'
) FROM users WHERE nickname = 'theory';

SELECT lives_ok(
    $$ SELECT ins_user('strongrrl', 'wet blanket') $$,
    'Insert user "strongrrl"'
);
SELECT is(COUNT(*)::int, 2, 'Should now have two users')
  FROM users;

SELECT isnt(
    (SELECT password FROM users WHERE nickname = 'strongrrl'),
    (SELECT password FROM users WHERE nickname = 'theory'),
    'Same password should not match'
);

SELECT unalike(
    password,
    '%' || nickname || '%',
    'Password should not contain nickname'
) FROM users;

SELECT unalike(
    password,
    '%wet blanket%',
    'Password should not contain clear text'
) FROM users;

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should match crypted password'
) FROM users;

SELECT has_function('upd_pass');
SELECT has_function('upd_pass', ARRAY['text', 'text', 'text']);
SELECT function_returns('upd_pass', 'boolean');

SELECT ok(
    NOT upd_pass('nobody', 'foo', 'bar'),
    'upd_pass() should return false for nonexistent user'
);

SELECT ok(
    NOT upd_pass('theory', 'foo', 'bar'),
    'upd_pass() should return false for invalid old pass'
);

SELECT is(
    password,
    crypt('wet blanket', password),
    'Password should be unchanged'
) FROM users WHERE nickname = 'theory';

SELECT ok(
    upd_pass('theory', 'wet blanket', 'pgtap rulez'),
    'upd_pass() should return true for proper args'
);

SELECT is(
    password,
    crypt('pgtap rulez', password),
    'Password should now be changed'
) FROM users WHERE nickname = 'theory';

SELECT finish();
ROLLBACK;
